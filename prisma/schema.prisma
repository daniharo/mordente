generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                 @id @default(autoincrement())
  uid            String              @unique
  username       String              @unique
  firstName      String
  lastName       String?
  memberships    Membership[]
  assignedEvents EventAssignedUser[]
}

model Ensemble {
  id          Int               @id @default(autoincrement())
  name        String
  type        String?
  description String?
  memberships Membership[]
  songs       Song[]
  events      Event[]
  groups      InstrumentGroup[]
}

model Membership {
  id           Int         @id @default(autoincrement())
  ensemble     Ensemble    @relation(fields: [ensembleId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  creationDate DateTime    @default(now())
  ensembleId   Int
  userId       Int
  instrument   Instrument?
  admin        Admin?

  @@unique([userId, ensembleId])
}

model Song {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  link        String?
  type        String?
  ensemble    Ensemble? @relation(fields: [ensembleId], references: [id])
  ensembleId  Int?
  parts       Part[]
}

model Part {
  id         Int        @id @default(autoincrement())
  name       String
  fileId     String
  song       Song       @relation(fields: [songId], references: [id])
  instrument Instrument
  songId     Int
}

model Event {
  id             Int                  @id @default(autoincrement())
  name           String
  startDate      DateTime?
  endDate        DateTime?
  description    String?
  eventType      String?
  ensemble       Ensemble             @relation(fields: [ensembleId], references: [id])
  ensembleId     Int
  status         EventStatus          @default(DRAFT)
  assignedGroups EventAssignedGroup[]
  assignedUsers  EventAssignedUser[]
}

model EventAssignedGroup {
  id                Int             @id @default(autoincrement())
  event             Event           @relation(fields: [eventId], references: [id])
  group             InstrumentGroup @relation(fields: [instrumentGroupId], references: [id])
  eventId           Int
  instrumentGroupId Int

  @@unique([eventId, instrumentGroupId])
}

model EventAssignedUser {
  id      Int   @id @default(autoincrement())
  event   Event @relation(fields: [eventId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
  eventId Int
  userId  Int

  @@unique([eventId, userId])
}

model Admin {
  id           Int        @id @default(autoincrement())
  adminType    String?
  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId Int        @unique
}

model InstrumentGroup {
  id                 Int                  @id @default(autoincrement())
  name               String
  ensemble           Ensemble             @relation(fields: [ensembleId], references: [id])
  ensembleId         Int
  instruments        InstrumentInGroup[]
  EventAssignedGroup EventAssignedGroup[]
}

model InstrumentInGroup {
  id                Int             @id @default(autoincrement())
  instrumentGroup   InstrumentGroup @relation(fields: [instrumentGroupId], references: [id])
  instrumentGroupId Int
  instrument        Instrument

  @@unique([instrument, instrumentGroupId])
}

enum EventStatus {
  DRAFT
  CANCELED
  POSTPONED
  PUBLISHED
}

enum Instrument {
  FLUTE
  CLARINET
  SAX
  HORN
  BASS
  PERCUSSION
  TRUMPET
  TROMBONE
  BASSOON
  OBOE
  VIOLIN
  VIOLA
  CELLO
  GUITAR
  PIANO
}
